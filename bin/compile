#!/bin/bash

indent() {
  sed -u 's/^/       /'
}

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
basedir="$( cd -P "$( dirname "$0" )" && pwd )"

INIT_SCRIPT="$BUILD_DIR/.profile.d/kibana.sh"

if [ -f "$ENV_DIR/ELASTICSEARCH_URL" ]; then
  ELASTICSEARCH_URL=$(cat $ENV_DIR/ELASTICSEARCH_URL)
else
  echo "You need to specify the environment variable ELASTICSEARCH_URL"
  exit 1
fi

if [ -f "$ENV_DIR/DOWNLOAD_URL" ]; then
  DOWNLOAD_URL=$(cat $ENV_DIR/DOWNLOAD_URL)
else
  DOWNLOAD_URL="https://download.elastic.co/kibana/kibana/kibana-4.5.4-linux-x64.tar.gz"
fi

KIBANA_PACKAGE=${DOWNLOAD_URL##*/}

case ${KIBANA_PACKAGE} in
  *.tar.gz)
    KIBANA_DIR="$BUILD_DIR/${KIBANA_PACKAGE%%.tar.gz}"
    tar="tar xz"
    ;;
  *)
    echo "Only tar.gz is supported: $KIBANA_PACKAGE" | indent
    exit 1
    ;;
esac

mkdir="mkdir -p"
download="curl -sLO"
extract="$tar -C $BUILD_DIR --wildcards -f"
verify="sha1sum --check --warn"
configure='sed -i s/\#\x20\(elasticsearch.url:\x20\).\{1,\}/\1"'$(echo $ELASTICSEARCH_URL | sed 's/\//\\\//g')'"/'


echo "-----> Installing Kibana..."

$mkdir ${INIT_SCRIPT%/*}
$mkdir $CACHE_DIR

if [ ! -f "$CACHE_DIR/$KIBANA_PACKAGE" ]; then
  echo "downloading $DOWNLOAD_URL" | indent
  $download $DOWNLOAD_URL

  echo "verifying against ${DOWNLOAD_URL}.sha1.txt" | indent
  $download "${DOWNLOAD_URL}.sha1.txt"
  $verify "${KIBANA_PACKAGE}.sha1.txt"

  if [ $? -eq 0 ]; then
    mv $KIBANA_PACKAGE $CACHE_DIR
  else
    exit 1
  fi
fi

$extract $CACHE_DIR/$KIBANA_PACKAGE

echo "-----> Configuring ELASTICSEARCH_URL"
$configure $KIBANA_DIR/config/kibana.yml


if [ -f "$BUILD_DIR/kibana-plugins" ] ; then
  echo "-----> 'kibana-plugins' file detected"
  cd $KIBANA_DIR
    cat "${BUILD_DIR}/kibana-plugins" | while read line ; do
      plugin=$(echo $line | awk '{print $1}')
      echo "       Installing Kibana plugin '${plugin}'"

      url=$(echo $line | awk '{print $2}')
      if [ -n "$url" ] ; then
        ./bin/kibana plugin --install "${plugin}" --url "${url}" | indent
      else
        ./bin/kibana plugin --install "${plugin}" | indent
      fi
    done
  cd $BUILD_DIR
fi

if [[ -n "$KIBANA_USER" && -n "$KIBANA_PASSWORD" ]] ; then
  echo "-----> 'KIABANA_PASSWORD detected, installing reverse proxy for authentication"
  $mkdir "${BUILD_DIR}/vendor/nginx"
  NGINX_VERSION="${NGINX_VERSION:-1.10.1}"
  NGINX_URL="https://storage.sbg1.cloud.ovh.net/v1/AUTH_be65d32d71a6435589a419eac98613f2/scalingo-php-buildpack/package/nginx-${NGINX_VERSION}.tgz"
  curl --fail --retry 3 --retry-delay 2 --connect-timeout 3 --max-time 30 -s "$NGINX_URL" | tar -C "$BUILD_DIR/vendor/nginx" -xzf -
  printf "$KIBANA_USER:$(openssl passwd -1 -salt $(openssl rand -base64 6) $KIBANA_PASSWORD)" > $BUILD_DIR/.kibana-password
  mv "${KIBANA_DIR}/bin/kibana" "${KIBANA_DIR}/bin/kibana.orig"
  cp "$basedir/../conf/nginx.conf.erb" "$BUILD_DIR/vendor/nginx/conf/nginx.conf.erb"
  cat > "$KIBANA_DIR/bin/kibana" <<SH
#!/usr/bin/env bash

basedir="\$( cd -P "\$(dirname \$(dirname "\$0" ))" && pwd )"
pmsgr=/tmp/pmsgr
rm -f \$pmsgr
mkfifo \$pmsgr

erb "\$basedir/vendor/nginx/conf/nginx.conf.erb" > "\$basedir/vendor/nginx/conf/nginx.conf"

(
    nginx -p "\$basedir/vendor/nginx" -c "\$basedir/vendor/nginx/conf/nginx.conf"
    echo "nginx" > \$pmsgr
) &

(
    nginx -p "\$basedir/${KIBANA_DIR}/bin/kibana.orig" --port 8000
    echo "kibana" > \$pmsgr
) &

read exitproc <\$pmsgr
echo "Boot failed: \$exitproc"
exit 1
SH

  chmod +x "${KIBANA_DIR}/bin/kibana"
fi

echo "Exporting PATH" | indent

cat <<EOF > $INIT_SCRIPT
export PATH="$PATH:${KIBANA_DIR##*/}/bin"
export NODE_OPTIONS="${NODE_OPTIONS:-"--max-old-space-size=512"}"
EOF
